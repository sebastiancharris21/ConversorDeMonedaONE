/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.conversormoneda.gui;

import java.awt.Color;
import javax.swing.JOptionPane;

/**
 *
 * @author H
 */
public class PrincipalScreen extends javax.swing.JFrame {

    /**
     * Creates new form PrincipalScreen
     */
    public PrincipalScreen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        panel_money = new javax.swing.JPanel();
        txt_title_money = new javax.swing.JLabel();
        cmb_convert = new javax.swing.JComboBox<>();
        textF_money = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cmb_convert1 = new javax.swing.JComboBox<>();
        btn_convert = new javax.swing.JButton();
        btn_clean = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        panel_temp = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtF_temp = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cmb_temp = new javax.swing.JComboBox<>();
        cmb_temp1 = new javax.swing.JComboBox<>();
        btn_calcular_temp = new javax.swing.JButton();
        btn_limpiar_temp = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        panel_money.setBackground(new java.awt.Color(255, 255, 255));

        txt_title_money.setFont(new java.awt.Font("Roboto Black", 1, 21)); // NOI18N
        txt_title_money.setForeground(new java.awt.Color(0, 0, 0));
        txt_title_money.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txt_title_money.setText("Conversor de Moneda");

        cmb_convert.setBackground(new java.awt.Color(255, 255, 255));
        cmb_convert.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        cmb_convert.setForeground(new java.awt.Color(0, 0, 0));
        cmb_convert.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "$ Pesos (COP)", "$ Dolar (USD)", "€ Euro (EUR)", "£ Libra Esterlina (GBP)", "¥ Yen Japones (JPY)", "₩ Won SurCoreano (KRW)" }));
        cmb_convert.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmb_convertMouseClicked(evt);
            }
        });
        cmb_convert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_convertActionPerformed(evt);
            }
        });

        textF_money.setBackground(new java.awt.Color(255, 255, 255));
        textF_money.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        textF_money.setForeground(new java.awt.Color(204, 204, 204));
        textF_money.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textF_money.setText("Ingrese un valor");
        textF_money.setBorder(null);
        textF_money.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textF_moneyMouseClicked(evt);
            }
        });
        textF_money.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textF_moneyActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Roboto", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Selecciones en el tipo de moneda al que desea convertir: ");

        cmb_convert1.setBackground(new java.awt.Color(255, 255, 255));
        cmb_convert1.setFont(new java.awt.Font("Roboto", 1, 16)); // NOI18N
        cmb_convert1.setForeground(new java.awt.Color(0, 0, 0));
        cmb_convert1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "$ Pesos (COP)", "$ Dolar (USD)", "€ Euro (EUR)", "£ Libra Esterlina (GBP)", "¥ Yen Japones (JPY)", "₩ Won SurCoreano (KRW)" }));
        cmb_convert1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_convert1ActionPerformed(evt);
            }
        });

        btn_convert.setBackground(new java.awt.Color(255, 255, 255));
        btn_convert.setFont(new java.awt.Font("Roboto Black", 1, 18)); // NOI18N
        btn_convert.setForeground(new java.awt.Color(0, 0, 0));
        btn_convert.setText("Convertir");
        btn_convert.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_convertMouseClicked(evt);
            }
        });

        btn_clean.setBackground(new java.awt.Color(255, 255, 255));
        btn_clean.setFont(new java.awt.Font("Roboto Black", 1, 18)); // NOI18N
        btn_clean.setForeground(new java.awt.Color(0, 0, 0));
        btn_clean.setText("Limpiar");
        btn_clean.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_cleanMouseClicked(evt);
            }
        });
        btn_clean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cleanActionPerformed(evt);
            }
        });

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));

        jSeparator3.setForeground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout panel_moneyLayout = new javax.swing.GroupLayout(panel_money);
        panel_money.setLayout(panel_moneyLayout);
        panel_moneyLayout.setHorizontalGroup(
            panel_moneyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_moneyLayout.createSequentialGroup()
                .addGroup(panel_moneyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_moneyLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panel_moneyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(panel_moneyLayout.createSequentialGroup()
                                .addGroup(panel_moneyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(textF_money, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmb_convert, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(panel_moneyLayout.createSequentialGroup()
                        .addGap(153, 153, 153)
                        .addGroup(panel_moneyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSeparator5)
                            .addGroup(panel_moneyLayout.createSequentialGroup()
                                .addComponent(btn_convert)
                                .addGap(71, 71, 71)
                                .addComponent(btn_clean, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jSeparator3)
            .addGroup(panel_moneyLayout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 588, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(panel_moneyLayout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addComponent(txt_title_money, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_moneyLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(cmb_convert1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(177, 177, 177))
        );
        panel_moneyLayout.setVerticalGroup(
            panel_moneyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_moneyLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txt_title_money)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panel_moneyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmb_convert, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(textF_money))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cmb_convert1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_moneyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_clean)
                    .addComponent(btn_convert))
                .addGap(42, 42, 42))
        );

        jTabbedPane1.addTab("ConversorDeMonedas", panel_money);

        panel_temp.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Roboto Black", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Conversor de Temperatura");

        txtF_temp.setBackground(new java.awt.Color(255, 255, 255));
        txtF_temp.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        txtF_temp.setForeground(new java.awt.Color(0, 0, 0));
        txtF_temp.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtF_temp.setBorder(null);

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Roboto Black", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Ingrese la temperatura:");

        cmb_temp.setBackground(new java.awt.Color(255, 255, 255));
        cmb_temp.setFont(new java.awt.Font("Roboto Black", 1, 14)); // NOI18N
        cmb_temp.setForeground(new java.awt.Color(0, 0, 0));
        cmb_temp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Celsius (°C)", "Fahrenheit (°F)", "Kelvin (°K)" }));
        cmb_temp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_tempActionPerformed(evt);
            }
        });

        cmb_temp1.setBackground(new java.awt.Color(255, 255, 255));
        cmb_temp1.setFont(new java.awt.Font("Roboto Black", 1, 14)); // NOI18N
        cmb_temp1.setForeground(new java.awt.Color(0, 0, 0));
        cmb_temp1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Celsius (°C)", "Fahrenheit (°F)", "Kelvin (°K)" }));
        cmb_temp1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        cmb_temp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_temp1ActionPerformed(evt);
            }
        });

        btn_calcular_temp.setBackground(new java.awt.Color(255, 255, 255));
        btn_calcular_temp.setFont(new java.awt.Font("Roboto Black", 1, 16)); // NOI18N
        btn_calcular_temp.setForeground(new java.awt.Color(0, 0, 0));
        btn_calcular_temp.setText("Calcular");
        btn_calcular_temp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_calcular_tempMouseClicked(evt);
            }
        });

        btn_limpiar_temp.setBackground(new java.awt.Color(255, 255, 255));
        btn_limpiar_temp.setFont(new java.awt.Font("Roboto Black", 1, 16)); // NOI18N
        btn_limpiar_temp.setForeground(new java.awt.Color(0, 0, 0));
        btn_limpiar_temp.setText("Limpiar");
        btn_limpiar_temp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_limpiar_tempMouseClicked(evt);
            }
        });

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Roboto Black", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Seleccione la temperatura a  calcular :");

        javax.swing.GroupLayout panel_tempLayout = new javax.swing.GroupLayout(panel_temp);
        panel_temp.setLayout(panel_tempLayout);
        panel_tempLayout.setHorizontalGroup(
            panel_tempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator6)
            .addComponent(jSeparator7)
            .addGroup(panel_tempLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_tempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_tempLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtF_temp, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_tempLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmb_temp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
            .addGroup(panel_tempLayout.createSequentialGroup()
                .addGroup(panel_tempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_tempLayout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_tempLayout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(btn_calcular_temp, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(btn_limpiar_temp))
                    .addGroup(panel_tempLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmb_temp1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_tempLayout.setVerticalGroup(
            panel_tempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_tempLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panel_tempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_tempLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 81, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_tempLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panel_tempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtF_temp, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmb_temp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)))
                .addGroup(panel_tempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_temp1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(panel_tempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_calcular_temp, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_limpiar_temp, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52))
        );

        jTabbedPane1.addTab("ConversorDeTemperaturas", panel_temp);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 580, 380));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textF_moneyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textF_moneyActionPerformed

    }//GEN-LAST:event_textF_moneyActionPerformed

    private void textF_moneyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textF_moneyMouseClicked
        if(textF_money.getText().equals("Ingrese un valor")){
            textF_money.setText("");
            textF_money.setForeground(Color.black);
        }
    }//GEN-LAST:event_textF_moneyMouseClicked

    private void cmb_convertMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmb_convertMouseClicked
         //primer comboBox
    }//GEN-LAST:event_cmb_convertMouseClicked

    private void btn_convertMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_convertMouseClicked
        if(!textF_money.getText().equals("") && textF_money.getText().matches("\\d+") ){
            double valorDinero = Double.parseDouble(textF_money.getText());
            int index = cmb_convert.getSelectedIndex();
            int index1 = cmb_convert1.getSelectedIndex();
            convertirDineroPesos(index, index1, valorDinero);
        }else{
            JOptionPane.showMessageDialog(null, "Ingresa un valor en numeros.....");
        }
    }//GEN-LAST:event_btn_convertMouseClicked

    private void btn_cleanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_cleanMouseClicked
        textF_money.setText("");
        textF_money.setForeground(Color.black);
        
    }//GEN-LAST:event_btn_cleanMouseClicked

    private void cmb_convert1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_convert1ActionPerformed
        //Segundo comboBox
       int valorIndex1 = cmb_convert1.getSelectedIndex();
        
        switch (valorIndex1) {
            case 0:
                //Peso
                System.out.println("El valor actual se convierte a $PESOS(COP)");          
                break;
            case 1:
                //Dolar
                System.out.println("El valor actual se convierte a $DOLAR(USD)");
                break;
            case 2:
                //Euro
                System.out.println("El valor actual se convierte a € EUROS(EUR)");
                break;
            case 3:
                //Libra Esterlina
                System.out.println("El valor actual se convierte a £LIBRA-ESTERLINA(GBP)");
                break;
            case 4:
                //yen japones
                System.out.println("El valor actual se convierte a ¥ YEN-JAPONES(JPY)");
                break;
            case 5:
                //won SurCoreano
                System.out.println("El valor actual se convierte a ₩ WON-SURCOREANO(KWR)");
                break;
            default:
                JOptionPane.showMessageDialog(null, "Esta Opcion no se encuentra disponible en este momento");
        }
        
    }//GEN-LAST:event_cmb_convert1ActionPerformed

    private void cmb_convertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_convertActionPerformed
        // primer ComboBox
        int valorIndex = cmb_convert.getSelectedIndex();
        
        switch (valorIndex) {
            case 0:
                //Pesos
                System.out.println("El valor actual se encuentra en $ PESOS(COP)");
                break;
            case 1:
                //Dolar
                System.out.println("El valor actual se encuentra en $ DOLAR(USD");
                break;
            case 2:
                //Euro
                System.out.println("El valor actual se encuentra en € EUROS(EUR)");
                break;
            case 3:
                //Libra Esterlina
                System.out.println("El valor actual se encuentra en £ LIBRA-ESTERLINA(GBP)");
                break;
            case 4:
                //Yen Japones
                System.out.println("El valor actual se encuentra en ¥ YEN-JAPONES(JPY)");
                break;
            case 5:
                // Won Sur Coreano
                System.out.println("El valor actual se encuentra en ₩ WON-SURCOREANO(KWR)");
                break;
            default:
                JOptionPane.showMessageDialog(null, "Esta Opcion no se encuentra disponible en este momento");
        }
    }//GEN-LAST:event_cmb_convertActionPerformed

    private void btn_cleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cleanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_cleanActionPerformed

    private void cmb_tempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_tempActionPerformed
        //comboBox temperatura 1
        
      int index_temp = cmb_temp.getSelectedIndex();
      
        switch (index_temp) {
            case 0:
                System.out.println("El valor se encuentra en grados CELSIUS(°C)");
                break;
            case 1:
                System.out.println("El valor se encuentra en grados FARENHEIT(°F)");
                break;
            case 2:
                System.out.println("El valor se encuenntra en grados KELVIN(°K)");
            break;
            default:
                System.out.println("El valor de conversion no se encuentra disponible por el momento");
        }
    }//GEN-LAST:event_cmb_tempActionPerformed

    private void cmb_temp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_temp1ActionPerformed
        //ComboBox Temperatura 2
        int index_temp1 =cmb_temp1.getSelectedIndex();
        
        switch (index_temp1) {
            case 0:
                System.out.println("El valor se transformará a grados CELSIUS(°C)");
                break;
            case 1:
                System.out.println("El valor se transformará a grados FARENHEIT(°F)");
                break;
            case 2:
                System.out.println("El valor se transformará a grados KELVIN(°K)");
                break;
            default:
                System.out.println("El valor de conversion no esta disponible por el momento");
        }
    }//GEN-LAST:event_cmb_temp1ActionPerformed

    private void btn_limpiar_tempMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_limpiar_tempMouseClicked
        // Boton de limpieza en el convertirdor de temperatura
        txtF_temp.setText("");
        txtF_temp.setForeground(Color.black);
    }//GEN-LAST:event_btn_limpiar_tempMouseClicked

    private void btn_calcular_tempMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_calcular_tempMouseClicked
        // Boton para convertir las temperaturas
        if(!txtF_temp.getText().equals("") && txtF_temp.getText().matches("\\d+")){
            int index_temp = cmb_temp.getSelectedIndex();
            int index_temp1 = cmb_temp1.getSelectedIndex();
            double temperatura = Double.parseDouble(txtF_temp.getText());
            convetirTemperatura(index_temp, index_temp1, temperatura);    
        }else{
            JOptionPane.showMessageDialog(null, "Ingrese un valo numerico...");
        }
    }//GEN-LAST:event_btn_calcular_tempMouseClicked
    
   private void convertirDineroPesos(int index1, int index2, double dinero){
        double dolar = 0.00024; double euro = 0.00022; double libraEsterlina=0.00019;
        double yen= 0.035; double won = 0.31;
    
        switch (index1) {
           case 0:
               //Peso
               if(index2==0){
                System.out.println("Pesos a pesos");
                JOptionPane.showMessageDialog(null, "$ "+(dinero));
                }else if(index2==1){
                System.out.println("Pesos a Dolar");
                JOptionPane.showMessageDialog(null, "$(USD) "+(dinero*dolar));
                }else if(index2==2){
                System.out.println("Pesos a Euro");
                JOptionPane.showMessageDialog(null, "€ "+(dinero*euro));
                }else if(index2==3){
                System.out.println("Pesos a Libra Esterlina");
                JOptionPane.showMessageDialog(null, "£ "+(dinero*libraEsterlina));
                }else if(index2==4){
                System.out.println("Pesos a Yen Japones");
                JOptionPane.showMessageDialog(null, "¥ "+(dinero*yen));
                }else if(index2==5){
                System.out.println("Pesos a Won SurCoreano");
                JOptionPane.showMessageDialog(null, "₩ "+(dinero*won));
                }else{System.out.println("Pesos a monedas");}
           break;
           case 1:
               //Dolar
               switch (index2) {
                   case 0 -> {   
                       System.out.println("Dolar a Pesos");
                       JOptionPane.showMessageDialog(null, "$ "+(dinero*(4157.98)));
                }
                   case 1 -> { 
                       System.out.println("Dolar a Dolar");
                       JOptionPane.showMessageDialog(null, "$(USD) "+(dinero));
                }
                   case 2 -> {
                       System.out.println("Dolar a Euro");
                       JOptionPane.showMessageDialog(null, "€ "+(dinero*0.92));
                }
                   case 3 -> {
                       System.out.println("Dolar a Libra Esterlina");
                       JOptionPane.showMessageDialog(null, "£ "+(dinero*0.79));
                }
                    case 4 -> {
                        System.out.println("Dolar a Yen Japones");
                        JOptionPane.showMessageDialog(null, "¥ "+(dinero*144.47));
                }
                    case 5 -> {
                        System.out.println("Dolar a Won Sur Coreano");
                        JOptionPane.showMessageDialog(null, "₩ "+(dinero*1294.80));
                }
                   default -> System.out.println("Dolar a monedas");
               }
            break;
           case 2:
               //Euro
               switch (index2) {
                   case 0:   
                       System.out.println("Euro a Pesos");
                        JOptionPane.showMessageDialog(null, "$ "+(dinero*4525.34));
                       break;
                   case 1: 
                       System.out.println("Euro a Dolar");
                       JOptionPane.showMessageDialog(null, "$(USD) "+(dinero*1.09));
                       break;
                   case 2:
                       System.out.println("Euro a Euro");
                       JOptionPane.showMessageDialog(null, "€ "+(dinero));
                   break;
                   case 3:
                       System.out.println("Euro a Libra Esterlina");
                       JOptionPane.showMessageDialog(null, "£ "+(dinero*0.86));
                       break;
                    case 4:
                       System.out.println("Euro a Yen Japones");
                       JOptionPane.showMessageDialog(null, "¥ "+(dinero*157.20));
                       break;
                    case 5:
                        System.out.println("Euro a Won Sur Coreano");
                        JOptionPane.showMessageDialog(null, "₩ "+(dinero*1410.92));
                        break;
                   default:
                       System.out.println("Euros a monedas");
               }
               break;
           case 3:
               //Libra Esterlina
               switch (index2) {
                   case 0:   
                       System.out.println("Libra Esterlina a Pesos");
                        JOptionPane.showMessageDialog(null, "$ "+(dinero*5287.70));
                       break;
                   case 1: 
                       System.out.println("Libra Esterlina a Dolar");
                       JOptionPane.showMessageDialog(null, "$(USD) "+(dinero*1.27));
                       break;
                   case 2:
                       System.out.println("Libra Esterlinaa Euro");
                       JOptionPane.showMessageDialog(null, "€ "+(dinero*1.17));
                   break;
                   case 3:
                       System.out.println("Libra Esterlina a Libra Esterlina");
                       JOptionPane.showMessageDialog(null, "£ "+(dinero));
                       break;
                    case 4:
                       System.out.println("Libra Esterlina a Yen Japones");
                       JOptionPane.showMessageDialog(null, "¥ "+(dinero*183.77));
                       break;
                    case 5:
                        System.out.println("Libra Esterlina a Won Sur Coreano");
                        JOptionPane.showMessageDialog(null, "₩ "+(dinero*1649.45));
                        break;
                   default:
                       System.out.println("Libra Esterlina monedas");
               }
               break;
           case 4:
               //Yen Japones
               switch (index2) {
                   case 0:   
                       System.out.println("Yen Japones a Pesos");
                        JOptionPane.showMessageDialog(null, "$ "+(dinero*28.78));
                       break;
                   case 1: 
                       System.out.println("Yen Japones a Dolar");
                       JOptionPane.showMessageDialog(null, "$(USD) "+(dinero*0.0069));
                       break;
                   case 2:
                       System.out.println("Yen Japones Euro");
                       JOptionPane.showMessageDialog(null, "€ "+(dinero*0.0064));
                   break;
                   case 3:
                       System.out.println("Yen Japones a Libra Esterlina");
                       JOptionPane.showMessageDialog(null, "£ "+(dinero*0.0054));
                       break;
                    case 4:
                       System.out.println("Yen Japones a Yen Japones");
                       JOptionPane.showMessageDialog(null, "¥ "+(dinero));
                       break;
                    case 5:
                        System.out.println("Yen Japones a Won Sur Coreano");
                        JOptionPane.showMessageDialog(null, "₩ "+(dinero*8.99));
                        break;
                   default:
                       System.out.println("Yen Japones a monedas");
               }
               break;
           case 5:
               //Won Sur Coreano
               switch (index2) {
                   case 0:   
                       System.out.println("Won Sur Coreano a Pesos");
                        JOptionPane.showMessageDialog(null, "$ "+(dinero*3.20));
                       break;
                   case 1: 
                       System.out.println("Won Sur Coreano a Dolar");
                       JOptionPane.showMessageDialog(null, "$(USD) "+(dinero*0.00077));
                       break;
                   case 2:
                       System.out.println("Won Sur Coreano Euro");
                       JOptionPane.showMessageDialog(null, "€ "+(dinero*0.00071));
                   break;
                   case 3:
                       System.out.println("Won Sur Coreano a Libra Esterlina");
                       JOptionPane.showMessageDialog(null, "£ "+(dinero*0.00061));
                       break;
                    case 4:
                       System.out.println("Won Sur Coreano a Yen Japones");
                       JOptionPane.showMessageDialog(null, "¥ "+(dinero*0.11));
                       break;
                    case 5:
                        System.out.println("Won Sur Coreano a Won Sur Coreano");
                        JOptionPane.showMessageDialog(null, "₩ "+(dinero));
                        break;
                   default:
                       System.out.println("Won Sur Coreano a monedas");
               }
               break;
           default:
               System.out.println("Conversion de dinero no disponible por el momento");
       }
   }
   
   private void convetirTemperatura(int index_temp, int index_temp1, double temperatura){
       //Caluculador de temperatura
       //Celcius -> (°C +(9/5)+32) °F --- (°C+273.15) K
       //Farenheit --> ((°F-32)*(5/9))C ---((°F-32)*(5/9)+273.15)K
       //Kelvin--> (°K-273.15) C ---((°k-273.15)*(9/5)+32)F
       
       
       switch (index_temp) {
           case 0:
               //Grados °C
               switch (index_temp1) {
                   case 0:
                       //°C a °C
                       JOptionPane.showMessageDialog(null,(temperatura)+" °C");
                       break;
                   case 1:
                       //°C a °F
                       JOptionPane.showMessageDialog(null, ((temperatura*(1.8))+32)+" °F");
                       break;
                   case 2:
                       //°C a °K
                       JOptionPane.showMessageDialog(null, (temperatura+273.15) +" °K" );
                       break;
                   default:
                       System.out.println("Valor de conversion no Disponible");
               }
               break;
           case 1:
               //Grados °F
               switch (index_temp1) {
                   case 0:
                       //°F a °C
                       JOptionPane.showMessageDialog(null,((temperatura-32)*(0.555555))+" °C" );
                       break;
                   case 1:
                       //°F a °F
                       JOptionPane.showMessageDialog(null, temperatura+" °F");
                       break;
                   case 2:
                       //°C a °K
                       JOptionPane.showMessageDialog(null, ((temperatura-32)*(0.555555)+273.15)+" °K" );
                       break;
                   default:
                       System.out.println("Valor de conversion no Disponible");
               }
               break;
           case 2:
               //Grados °K
               switch (index_temp1) {
                   case 0:
                       //°K a °C
                       JOptionPane.showMessageDialog(null,(temperatura-273.15)+" °C" );
                       break;
                   case 1:
                       //°K a °F
                       JOptionPane.showMessageDialog(null, ((temperatura-273.15)*(1.8)+32)+" °F");
                       break;
                   case 2:
                       //°K a °K
                       JOptionPane.showMessageDialog(null, temperatura+" °K" );
                       break;
                   default:
                       System.out.println("Valor de conversion no Disponible");
               }
               break;
           default:
               System.out.println("Conversion no disponibles");
       }
       
       
   }
            
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new PrincipalScreen().setVisible(true);             
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_calcular_temp;
    private javax.swing.JButton btn_clean;
    private javax.swing.JButton btn_convert;
    private javax.swing.JButton btn_limpiar_temp;
    private javax.swing.JComboBox<String> cmb_convert;
    private javax.swing.JComboBox<String> cmb_convert1;
    private javax.swing.JComboBox<String> cmb_temp;
    private javax.swing.JComboBox<String> cmb_temp1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel panel_money;
    private javax.swing.JPanel panel_temp;
    private javax.swing.JTextField textF_money;
    private javax.swing.JTextField txtF_temp;
    private javax.swing.JLabel txt_title_money;
    // End of variables declaration//GEN-END:variables
}
